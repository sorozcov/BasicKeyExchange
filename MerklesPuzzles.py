# Universidad del Valle de Guatemala
# Cifrado de información 2020 2
# Grupo 7
# Implementación MerklesPuzzles.py
# This is a implementation of Merkles Puzzles.

# We want communication between Alice and Bob.
# To make this communication private Alice and Bob will need a private key
# They will go ahead and use Merkle's Puzzles to generate this key and pass to each other
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad
import random

# First Alice and Bob agree on an n number to generate n puzzles
# They also need to agree on a cipher algorithm that they will use to do encription and decription with the puzzles
# We will use AES GCM as the cipher and encoding in latin-1

# Alice will have access to nPuzzles, puzzles, randomPuzzles and Keys
# Alice will send randomPuzzles to Bob (all the puzzles in a random order)
# Bob will return alice the number that they will use
# Alice now has the private key as well as Bob


nPuzzles = 300
keyLengthNoPadding = 2
keyLengthWithPadding =16
puzzles=[]
randomPuzzles = []
keys=[]
print("Alice and Bob will use AES GCM as the cipher")
print("Alice will send Bob a number of " + str(nPuzzles)+" puzzles.")
print("Alice tells Bob the keyLength will be",keyLengthNoPadding)

# Alice generates the puzzles
for i in range(nPuzzles):
    iPuzzle = "Puzzle: "
    #Generate a random key for the puzzle
    key = get_random_bytes(keyLengthNoPadding)
    key=pad(key,keyLengthWithPadding)
    iPuzzle = iPuzzle + str(i) + " " + str(key)
    cipher = AES.new(key, AES.MODE_GCM,key)
    ct_bytes = cipher.encrypt(iPuzzle.encode('latin-1'))
    ciphertext = ct_bytes.decode('latin-1')
    #Alice keeps track of the keys and of the puzzles
    keys.append(key)
    puzzles.append(ciphertext) 
print("Alice has already generated the puzzles.")

#Alice generates a shuffled puzzle list to sent to Bob
randomPuzzles = puzzles
randomPuzzles= random.sample(randomPuzzles,len(randomPuzzles))
print("The puzzle list generated by Alice and being sent to Bob with size \n",nPuzzles)
# Once Alice has generated the puzzles, they are sent to Bob so he can start decrypting
#First Bob chooses a random puzzle to solve
randomIntToSolvePuzzle = random.randint(0,nPuzzles-1)
puzzleToSolve = randomPuzzles[randomIntToSolvePuzzle]
notDecryptedPuzzle = True
print("Bob has chosen one random puzzle to solve ")
#Start to brutely solve the puzzle knowing first letters will have "Puzzle:"
indexPuzzleCountTry = 0
while notDecryptedPuzzle:
    indexPuzzleCountTry = indexPuzzleCountTry + 1
    print("Attempt Bob ",indexPuzzleCountTry)
    #Generate a random key for the puzzle
    key = get_random_bytes(keyLengthNoPadding)
    key=pad(key,keyLengthWithPadding)
    
    cipher = AES.new(key, AES.MODE_GCM,key)
    #We start trying to decrypt the puzzle we randomly picked
    pt_bytes = cipher.decrypt(puzzleToSolve.encode('latin-1'))
    plainText = pt_bytes.decode('latin-1')
    #If first letters have Puzzle then we have decrypted it correctly and we access the key we will use
    if(plainText.split()[0]=="Puzzle:"):
        #Bob keeps the key and the puzzlePosition to send it to Alice
        puzzle,puzzlePosition,privateKeyBob = plainText.split()
        print("Bob figured it out in his attempt # ",indexPuzzleCountTry)
        print("Bob solved the puzzle")
        print("Bob found the key in position: ", puzzlePosition)
        print("Bob found the key: ", privateKeyBob)
        
        #Now he can send the puzzlePosition to Alice
        notDecryptedPuzzle = False
    
#Alice gets the puzzlePosition to also know the key they will use
privateKeyAlice=keys[int(puzzlePosition)]
print("Alice has received the puzzle position: ", puzzlePosition)
print("Alice has gotten they key they will use to communicate: ", privateKeyAlice)
#Now they can start to communicate with that key


